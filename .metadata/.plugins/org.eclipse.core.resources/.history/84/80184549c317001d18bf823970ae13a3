/******************************************************************************
 *
 * Module: Timers atmega16
 *
 * File Name: timer.c
 *
 * Description: Source file for timer0 in AVR driver
 *
 * Author: Ola Badr
 *
 *******************************************************************************/

#include "std_types.h"
#include "timer0.h"
#include "common_macros.h" /* To use the macros like SET_BIT */
#include <avr/io.h> /* To use Timers Registers */
#include <avr/interrupt.h> /* For Timer ISR */
#include "gpio.h" /*to setup direction*/

/*******************************************************************************
 *                           Global Variables                                  *
 *******************************************************************************/

/* Global variables to hold the address of the call back function in the application */
static volatile void (*g0_callBackPtr)(void) = NULL_PTR; /*Timer0*/


/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/


ISR(TIMER0_OVF_vect)
{
	if(g0_callBackPtr != NULL_PTR)
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g0_callBackPtr)();
	}

	TIFR |= (1<<TOV0); /*Clear Flag*/
}

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer0_init(void)
{

	TCNT0 = 0;		/* Set Timer0 initial count to zero */


	/*Configure timer control register TCCR2
	 * COM01,COM00 Bits 5:4 for compare output mode
	 * Waveform Generation Mode WGM00 & WGM01 Bits 6-3
	 * FOC0 for initially non-pwm mode
	 * CS00, CS01, CS02 Pre-scaler Bits 0:2
	 */
	TCCR0 = (1<<FOC0) | ((Config_Ptr->modeT02 << (WGM01-1)) & (1<<WGM01)) | ((Config_Ptr->modeT02 <<WGM00)& (1<<WGM00)) \
			| (Config_Ptr->COM << COM00 ) | (Config_Ptr->prescaler ) ;


	switch (Config_Ptr->modeT02)
	{
	case overflow:
		SET_BIT(TIMSK,TOIE0); /*Enable overflow interrupt for timer0*/
		break;

	case CTC_0_2 :
		OCR0= Config_Ptr->comp_value; /*Set the Compare value */
		SET_BIT(TIMSK,OCIE0); /*Enable compare match interrupt for timer0*/
		break;

	case Fast_PWM :
		TCCR0 &= ~(1<<FOC0); /*not active for PWM mode */
		/* Convert the value of duty_cycle that is sent to equivalent binary
		 * set compare register to the duty cycle value*/
		OCR0 = (uint8)((Config_Ptr->dutyCycle * 255)/100);
		GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT); 	/*Setup the direction for OC0 as output pin*/
		break;

	default :
		break;
	}


}

/*==========================CALL BACK FUNCTIONS=================================*/
void Timer0_setCallBack(void(*a_ptr)(void))
{
	/* Save the address of the Call back function in a global variable */
	g0_callBackPtr = a_ptr;
}



/*==========================DeInit FUNCTIONS=================================*/

void Timer0_DeInit(void)
{
	TIMSK &= ~(1<<TOIE0) & ~(1<<OCIE0); /*Disable Interrupts of Timer0 Bits0:1*/
	TCCR0 = 0;

}
