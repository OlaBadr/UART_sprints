
echo1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000606  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000bb8  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000d9e  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 01 03 	jmp	0x602	; 0x602 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "usart.h"



int main ()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	ff cf       	rjmp	.-2      	; 0x74 <main+0x8>

00000076 <DIO_init>:
 * pinNumber: is an input argument that describes pin number in each port, 0, 1, 2, ... etc.
 * port: is an input argument that describes port character, 'A', 'B', ... etc.
 * direction: is an input argument that describes the data direction on a specific pin, IN or OUT
 */
void DIO_init(uint8_t pinNumber, uint8_t port, uint8_t direction)
{
  76:	df 93       	push	r29
  78:	cf 93       	push	r28
  7a:	00 d0       	rcall	.+0      	; 0x7c <DIO_init+0x6>
  7c:	00 d0       	rcall	.+0      	; 0x7e <DIO_init+0x8>
  7e:	0f 92       	push	r0
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	89 83       	std	Y+1, r24	; 0x01
  86:	6a 83       	std	Y+2, r22	; 0x02
  88:	4b 83       	std	Y+3, r20	; 0x03

	/* Setup the pin direction as required */
	switch(port)
  8a:	8a 81       	ldd	r24, Y+2	; 0x02
  8c:	28 2f       	mov	r18, r24
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	3d 83       	std	Y+5, r19	; 0x05
  92:	2c 83       	std	Y+4, r18	; 0x04
  94:	8c 81       	ldd	r24, Y+4	; 0x04
  96:	9d 81       	ldd	r25, Y+5	; 0x05
  98:	82 34       	cpi	r24, 0x42	; 66
  9a:	91 05       	cpc	r25, r1
  9c:	09 f4       	brne	.+2      	; 0xa0 <DIO_init+0x2a>
  9e:	44 c0       	rjmp	.+136    	; 0x128 <DIO_init+0xb2>
  a0:	2c 81       	ldd	r18, Y+4	; 0x04
  a2:	3d 81       	ldd	r19, Y+5	; 0x05
  a4:	23 34       	cpi	r18, 0x43	; 67
  a6:	31 05       	cpc	r19, r1
  a8:	34 f4       	brge	.+12     	; 0xb6 <DIO_init+0x40>
  aa:	8c 81       	ldd	r24, Y+4	; 0x04
  ac:	9d 81       	ldd	r25, Y+5	; 0x05
  ae:	81 34       	cpi	r24, 0x41	; 65
  b0:	91 05       	cpc	r25, r1
  b2:	71 f0       	breq	.+28     	; 0xd0 <DIO_init+0x5a>
  b4:	bc c0       	rjmp	.+376    	; 0x22e <DIO_init+0x1b8>
  b6:	2c 81       	ldd	r18, Y+4	; 0x04
  b8:	3d 81       	ldd	r19, Y+5	; 0x05
  ba:	23 34       	cpi	r18, 0x43	; 67
  bc:	31 05       	cpc	r19, r1
  be:	09 f4       	brne	.+2      	; 0xc2 <DIO_init+0x4c>
  c0:	5f c0       	rjmp	.+190    	; 0x180 <DIO_init+0x10a>
  c2:	8c 81       	ldd	r24, Y+4	; 0x04
  c4:	9d 81       	ldd	r25, Y+5	; 0x05
  c6:	84 34       	cpi	r24, 0x44	; 68
  c8:	91 05       	cpc	r25, r1
  ca:	09 f4       	brne	.+2      	; 0xce <DIO_init+0x58>
  cc:	85 c0       	rjmp	.+266    	; 0x1d8 <DIO_init+0x162>
  ce:	af c0       	rjmp	.+350    	; 0x22e <DIO_init+0x1b8>
	{
	case 'A':
		if(direction == OUT)
  d0:	8b 81       	ldd	r24, Y+3	; 0x03
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	a1 f4       	brne	.+40     	; 0xfe <DIO_init+0x88>
		{
			SET_BIT(DDRA,pinNumber);
  d6:	aa e3       	ldi	r26, 0x3A	; 58
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	ea e3       	ldi	r30, 0x3A	; 58
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	48 2f       	mov	r20, r24
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	28 2f       	mov	r18, r24
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 2e       	mov	r0, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_init+0x7e>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_init+0x7a>
  f8:	84 2b       	or	r24, r20
  fa:	8c 93       	st	X, r24
  fc:	98 c0       	rjmp	.+304    	; 0x22e <DIO_init+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRA,pinNumber);
  fe:	aa e3       	ldi	r26, 0x3A	; 58
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	ea e3       	ldi	r30, 0x3A	; 58
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	48 2f       	mov	r20, r24
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	28 2f       	mov	r18, r24
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 2e       	mov	r0, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_init+0xa6>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_init+0xa2>
 120:	80 95       	com	r24
 122:	84 23       	and	r24, r20
 124:	8c 93       	st	X, r24
 126:	83 c0       	rjmp	.+262    	; 0x22e <DIO_init+0x1b8>
		}
		break;
	case 'B':
		if(direction == OUT)
 128:	8b 81       	ldd	r24, Y+3	; 0x03
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	a1 f4       	brne	.+40     	; 0x156 <DIO_init+0xe0>
		{
			SET_BIT(DDRB,pinNumber);
 12e:	a7 e3       	ldi	r26, 0x37	; 55
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e7 e3       	ldi	r30, 0x37	; 55
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	48 2f       	mov	r20, r24
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	28 2f       	mov	r18, r24
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 2e       	mov	r0, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_init+0xd6>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_init+0xd2>
 150:	84 2b       	or	r24, r20
 152:	8c 93       	st	X, r24
 154:	6c c0       	rjmp	.+216    	; 0x22e <DIO_init+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRB,pinNumber);
 156:	a7 e3       	ldi	r26, 0x37	; 55
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e7 e3       	ldi	r30, 0x37	; 55
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	48 2f       	mov	r20, r24
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 2e       	mov	r0, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_init+0xfe>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_init+0xfa>
 178:	80 95       	com	r24
 17a:	84 23       	and	r24, r20
 17c:	8c 93       	st	X, r24
 17e:	57 c0       	rjmp	.+174    	; 0x22e <DIO_init+0x1b8>
		}
		break;
	case 'C':
		if(direction == OUT)
 180:	8b 81       	ldd	r24, Y+3	; 0x03
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	a1 f4       	brne	.+40     	; 0x1ae <DIO_init+0x138>
		{
			SET_BIT(DDRC,pinNumber);
 186:	a4 e3       	ldi	r26, 0x34	; 52
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	e4 e3       	ldi	r30, 0x34	; 52
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	48 2f       	mov	r20, r24
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	28 2f       	mov	r18, r24
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 2e       	mov	r0, r18
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_init+0x12e>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_init+0x12a>
 1a8:	84 2b       	or	r24, r20
 1aa:	8c 93       	st	X, r24
 1ac:	40 c0       	rjmp	.+128    	; 0x22e <DIO_init+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRC,pinNumber);
 1ae:	a4 e3       	ldi	r26, 0x34	; 52
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	e4 e3       	ldi	r30, 0x34	; 52
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	48 2f       	mov	r20, r24
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	28 2f       	mov	r18, r24
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 2e       	mov	r0, r18
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_init+0x156>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_init+0x152>
 1d0:	80 95       	com	r24
 1d2:	84 23       	and	r24, r20
 1d4:	8c 93       	st	X, r24
 1d6:	2b c0       	rjmp	.+86     	; 0x22e <DIO_init+0x1b8>
		}
		break;
	case 'D':
		if(direction == OUT)
 1d8:	8b 81       	ldd	r24, Y+3	; 0x03
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	a1 f4       	brne	.+40     	; 0x206 <DIO_init+0x190>
		{
			SET_BIT(DDRD,pinNumber);
 1de:	a1 e3       	ldi	r26, 0x31	; 49
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	e1 e3       	ldi	r30, 0x31	; 49
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	48 2f       	mov	r20, r24
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	28 2f       	mov	r18, r24
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 2e       	mov	r0, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_init+0x186>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_init+0x182>
 200:	84 2b       	or	r24, r20
 202:	8c 93       	st	X, r24
 204:	14 c0       	rjmp	.+40     	; 0x22e <DIO_init+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRD,pinNumber);
 206:	a1 e3       	ldi	r26, 0x31	; 49
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	e1 e3       	ldi	r30, 0x31	; 49
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	48 2f       	mov	r20, r24
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	28 2f       	mov	r18, r24
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 2e       	mov	r0, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_init+0x1ae>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	0a 94       	dec	r0
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_init+0x1aa>
 228:	80 95       	com	r24
 22a:	84 23       	and	r24, r20
 22c:	8c 93       	st	X, r24
		break;
	}



}
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	cf 91       	pop	r28
 23a:	df 91       	pop	r29
 23c:	08 95       	ret

0000023e <DIO_write>:
 * pinNumber: is an input argument that describes pin number in each port, 0, 1, 2, ... etc.
 * port: is an input argument that describes port character, 'A', 'B', ... etc.
 * value: is an input argument that describes the value on a specific pin, LOW or HIGH
 */
void DIO_write(uint8_t pinNumber, uint8_t port, uint8_t value)
{
 23e:	df 93       	push	r29
 240:	cf 93       	push	r28
 242:	00 d0       	rcall	.+0      	; 0x244 <DIO_write+0x6>
 244:	00 d0       	rcall	.+0      	; 0x246 <DIO_write+0x8>
 246:	0f 92       	push	r0
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	89 83       	std	Y+1, r24	; 0x01
 24e:	6a 83       	std	Y+2, r22	; 0x02
 250:	4b 83       	std	Y+3, r20	; 0x03
	/* Write the pin value as required */
	switch(port)
 252:	8a 81       	ldd	r24, Y+2	; 0x02
 254:	28 2f       	mov	r18, r24
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	3d 83       	std	Y+5, r19	; 0x05
 25a:	2c 83       	std	Y+4, r18	; 0x04
 25c:	8c 81       	ldd	r24, Y+4	; 0x04
 25e:	9d 81       	ldd	r25, Y+5	; 0x05
 260:	82 34       	cpi	r24, 0x42	; 66
 262:	91 05       	cpc	r25, r1
 264:	09 f4       	brne	.+2      	; 0x268 <DIO_write+0x2a>
 266:	44 c0       	rjmp	.+136    	; 0x2f0 <DIO_write+0xb2>
 268:	2c 81       	ldd	r18, Y+4	; 0x04
 26a:	3d 81       	ldd	r19, Y+5	; 0x05
 26c:	23 34       	cpi	r18, 0x43	; 67
 26e:	31 05       	cpc	r19, r1
 270:	34 f4       	brge	.+12     	; 0x27e <DIO_write+0x40>
 272:	8c 81       	ldd	r24, Y+4	; 0x04
 274:	9d 81       	ldd	r25, Y+5	; 0x05
 276:	81 34       	cpi	r24, 0x41	; 65
 278:	91 05       	cpc	r25, r1
 27a:	71 f0       	breq	.+28     	; 0x298 <DIO_write+0x5a>
 27c:	bc c0       	rjmp	.+376    	; 0x3f6 <DIO_write+0x1b8>
 27e:	2c 81       	ldd	r18, Y+4	; 0x04
 280:	3d 81       	ldd	r19, Y+5	; 0x05
 282:	23 34       	cpi	r18, 0x43	; 67
 284:	31 05       	cpc	r19, r1
 286:	09 f4       	brne	.+2      	; 0x28a <DIO_write+0x4c>
 288:	5f c0       	rjmp	.+190    	; 0x348 <DIO_write+0x10a>
 28a:	8c 81       	ldd	r24, Y+4	; 0x04
 28c:	9d 81       	ldd	r25, Y+5	; 0x05
 28e:	84 34       	cpi	r24, 0x44	; 68
 290:	91 05       	cpc	r25, r1
 292:	09 f4       	brne	.+2      	; 0x296 <DIO_write+0x58>
 294:	85 c0       	rjmp	.+266    	; 0x3a0 <DIO_write+0x162>
 296:	af c0       	rjmp	.+350    	; 0x3f6 <DIO_write+0x1b8>
	{
	case 'A':
		if(value == HIGH)
 298:	8b 81       	ldd	r24, Y+3	; 0x03
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	a1 f4       	brne	.+40     	; 0x2c6 <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinNumber);
 29e:	ab e3       	ldi	r26, 0x3B	; 59
 2a0:	b0 e0       	ldi	r27, 0x00	; 0
 2a2:	eb e3       	ldi	r30, 0x3B	; 59
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	48 2f       	mov	r20, r24
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	28 2f       	mov	r18, r24
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 2e       	mov	r0, r18
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_write+0x7e>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	0a 94       	dec	r0
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_write+0x7a>
 2c0:	84 2b       	or	r24, r20
 2c2:	8c 93       	st	X, r24
 2c4:	98 c0       	rjmp	.+304    	; 0x3f6 <DIO_write+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pinNumber);
 2c6:	ab e3       	ldi	r26, 0x3B	; 59
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	eb e3       	ldi	r30, 0x3B	; 59
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	48 2f       	mov	r20, r24
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	28 2f       	mov	r18, r24
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 2e       	mov	r0, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_write+0xa6>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	0a 94       	dec	r0
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_write+0xa2>
 2e8:	80 95       	com	r24
 2ea:	84 23       	and	r24, r20
 2ec:	8c 93       	st	X, r24
 2ee:	83 c0       	rjmp	.+262    	; 0x3f6 <DIO_write+0x1b8>
		}
		break;
	case 'B':
		if(value == HIGH)
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	a1 f4       	brne	.+40     	; 0x31e <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinNumber);
 2f6:	a8 e3       	ldi	r26, 0x38	; 56
 2f8:	b0 e0       	ldi	r27, 0x00	; 0
 2fa:	e8 e3       	ldi	r30, 0x38	; 56
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	48 2f       	mov	r20, r24
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	28 2f       	mov	r18, r24
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 2e       	mov	r0, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_write+0xd6>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_write+0xd2>
 318:	84 2b       	or	r24, r20
 31a:	8c 93       	st	X, r24
 31c:	6c c0       	rjmp	.+216    	; 0x3f6 <DIO_write+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTB,pinNumber);
 31e:	a8 e3       	ldi	r26, 0x38	; 56
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	e8 e3       	ldi	r30, 0x38	; 56
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	48 2f       	mov	r20, r24
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 2e       	mov	r0, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_write+0xfe>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_write+0xfa>
 340:	80 95       	com	r24
 342:	84 23       	and	r24, r20
 344:	8c 93       	st	X, r24
 346:	57 c0       	rjmp	.+174    	; 0x3f6 <DIO_write+0x1b8>
		}
		break;
	case 'C':
		if(value == HIGH)
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	a1 f4       	brne	.+40     	; 0x376 <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinNumber);
 34e:	a5 e3       	ldi	r26, 0x35	; 53
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	e5 e3       	ldi	r30, 0x35	; 53
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	48 2f       	mov	r20, r24
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 2e       	mov	r0, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_write+0x12e>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_write+0x12a>
 370:	84 2b       	or	r24, r20
 372:	8c 93       	st	X, r24
 374:	40 c0       	rjmp	.+128    	; 0x3f6 <DIO_write+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTC,pinNumber);
 376:	a5 e3       	ldi	r26, 0x35	; 53
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	e5 e3       	ldi	r30, 0x35	; 53
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	48 2f       	mov	r20, r24
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	28 2f       	mov	r18, r24
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 2e       	mov	r0, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_write+0x156>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_write+0x152>
 398:	80 95       	com	r24
 39a:	84 23       	and	r24, r20
 39c:	8c 93       	st	X, r24
 39e:	2b c0       	rjmp	.+86     	; 0x3f6 <DIO_write+0x1b8>
		}
		break;
	case 'D':
		if(value == HIGH)
 3a0:	8b 81       	ldd	r24, Y+3	; 0x03
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	a1 f4       	brne	.+40     	; 0x3ce <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinNumber);
 3a6:	a2 e3       	ldi	r26, 0x32	; 50
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	e2 e3       	ldi	r30, 0x32	; 50
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	48 2f       	mov	r20, r24
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 2e       	mov	r0, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_write+0x186>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_write+0x182>
 3c8:	84 2b       	or	r24, r20
 3ca:	8c 93       	st	X, r24
 3cc:	14 c0       	rjmp	.+40     	; 0x3f6 <DIO_write+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTD,pinNumber);
 3ce:	a2 e3       	ldi	r26, 0x32	; 50
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	e2 e3       	ldi	r30, 0x32	; 50
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	48 2f       	mov	r20, r24
 3da:	89 81       	ldd	r24, Y+1	; 0x01
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 2e       	mov	r0, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_write+0x1ae>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	0a 94       	dec	r0
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_write+0x1aa>
 3f0:	80 95       	com	r24
 3f2:	84 23       	and	r24, r20
 3f4:	8c 93       	st	X, r24
		}
		break;
	}

}
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	0f 90       	pop	r0
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	cf 91       	pop	r28
 402:	df 91       	pop	r29
 404:	08 95       	ret

00000406 <DIO_read>:
 * pinNumber: is an input argument that describes pin number in each port, 0, 1, 2, ... etc.
 * port: is an input argument that describes port character, 'A', 'B', ... etc.
 * value: is an output argument that describes the value on a specific pin, LOW or HIGH
 */
void DIO_read(uint8_t pinNumber, uint8_t port, uint8_t *value)
{
 406:	df 93       	push	r29
 408:	cf 93       	push	r28
 40a:	00 d0       	rcall	.+0      	; 0x40c <DIO_read+0x6>
 40c:	00 d0       	rcall	.+0      	; 0x40e <DIO_read+0x8>
 40e:	00 d0       	rcall	.+0      	; 0x410 <DIO_read+0xa>
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	89 83       	std	Y+1, r24	; 0x01
 416:	6a 83       	std	Y+2, r22	; 0x02
 418:	5c 83       	std	Y+4, r21	; 0x04
 41a:	4b 83       	std	Y+3, r20	; 0x03
	*value = LOW;
 41c:	eb 81       	ldd	r30, Y+3	; 0x03
 41e:	fc 81       	ldd	r31, Y+4	; 0x04
 420:	10 82       	st	Z, r1


	/* Read the pin value as required */
	switch(port)
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	28 2f       	mov	r18, r24
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	3e 83       	std	Y+6, r19	; 0x06
 42a:	2d 83       	std	Y+5, r18	; 0x05
 42c:	4d 81       	ldd	r20, Y+5	; 0x05
 42e:	5e 81       	ldd	r21, Y+6	; 0x06
 430:	42 34       	cpi	r20, 0x42	; 66
 432:	51 05       	cpc	r21, r1
 434:	a1 f1       	breq	.+104    	; 0x49e <__stack+0x3f>
 436:	8d 81       	ldd	r24, Y+5	; 0x05
 438:	9e 81       	ldd	r25, Y+6	; 0x06
 43a:	83 34       	cpi	r24, 0x43	; 67
 43c:	91 05       	cpc	r25, r1
 43e:	34 f4       	brge	.+12     	; 0x44c <DIO_read+0x46>
 440:	2d 81       	ldd	r18, Y+5	; 0x05
 442:	3e 81       	ldd	r19, Y+6	; 0x06
 444:	21 34       	cpi	r18, 0x41	; 65
 446:	31 05       	cpc	r19, r1
 448:	71 f0       	breq	.+28     	; 0x466 <__stack+0x7>
 44a:	7c c0       	rjmp	.+248    	; 0x544 <__stack+0xe5>
 44c:	4d 81       	ldd	r20, Y+5	; 0x05
 44e:	5e 81       	ldd	r21, Y+6	; 0x06
 450:	43 34       	cpi	r20, 0x43	; 67
 452:	51 05       	cpc	r21, r1
 454:	09 f4       	brne	.+2      	; 0x458 <DIO_read+0x52>
 456:	3f c0       	rjmp	.+126    	; 0x4d6 <__stack+0x77>
 458:	8d 81       	ldd	r24, Y+5	; 0x05
 45a:	9e 81       	ldd	r25, Y+6	; 0x06
 45c:	84 34       	cpi	r24, 0x44	; 68
 45e:	91 05       	cpc	r25, r1
 460:	09 f4       	brne	.+2      	; 0x464 <__stack+0x5>
 462:	55 c0       	rjmp	.+170    	; 0x50e <__stack+0xaf>
 464:	6f c0       	rjmp	.+222    	; 0x544 <__stack+0xe5>
	{
	case 'A':
		if(BIT_IS_SET(PINA,pinNumber))
 466:	e9 e3       	ldi	r30, 0x39	; 57
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	28 2f       	mov	r18, r24
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	89 81       	ldd	r24, Y+1	; 0x01
 472:	88 2f       	mov	r24, r24
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	a9 01       	movw	r20, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <__stack+0x1f>
 47a:	55 95       	asr	r21
 47c:	47 95       	ror	r20
 47e:	8a 95       	dec	r24
 480:	e2 f7       	brpl	.-8      	; 0x47a <__stack+0x1b>
 482:	ca 01       	movw	r24, r20
 484:	81 70       	andi	r24, 0x01	; 1
 486:	90 70       	andi	r25, 0x00	; 0
 488:	88 23       	and	r24, r24
 48a:	29 f0       	breq	.+10     	; 0x496 <__stack+0x37>
		{
			*value = HIGH;
 48c:	eb 81       	ldd	r30, Y+3	; 0x03
 48e:	fc 81       	ldd	r31, Y+4	; 0x04
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	80 83       	st	Z, r24
 494:	57 c0       	rjmp	.+174    	; 0x544 <__stack+0xe5>
		}
		else
		{
			*value = LOW;
 496:	eb 81       	ldd	r30, Y+3	; 0x03
 498:	fc 81       	ldd	r31, Y+4	; 0x04
 49a:	10 82       	st	Z, r1
 49c:	53 c0       	rjmp	.+166    	; 0x544 <__stack+0xe5>
		}
		break;
	case 'B':
		if(BIT_IS_SET(PINB,pinNumber))
 49e:	e6 e3       	ldi	r30, 0x36	; 54
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	28 2f       	mov	r18, r24
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	89 81       	ldd	r24, Y+1	; 0x01
 4aa:	88 2f       	mov	r24, r24
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	a9 01       	movw	r20, r18
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__stack+0x57>
 4b2:	55 95       	asr	r21
 4b4:	47 95       	ror	r20
 4b6:	8a 95       	dec	r24
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__stack+0x53>
 4ba:	ca 01       	movw	r24, r20
 4bc:	81 70       	andi	r24, 0x01	; 1
 4be:	90 70       	andi	r25, 0x00	; 0
 4c0:	88 23       	and	r24, r24
 4c2:	29 f0       	breq	.+10     	; 0x4ce <__stack+0x6f>
		{
			*value = HIGH;
 4c4:	eb 81       	ldd	r30, Y+3	; 0x03
 4c6:	fc 81       	ldd	r31, Y+4	; 0x04
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	80 83       	st	Z, r24
 4cc:	3b c0       	rjmp	.+118    	; 0x544 <__stack+0xe5>
		}
		else
		{
			*value = LOW;
 4ce:	eb 81       	ldd	r30, Y+3	; 0x03
 4d0:	fc 81       	ldd	r31, Y+4	; 0x04
 4d2:	10 82       	st	Z, r1
 4d4:	37 c0       	rjmp	.+110    	; 0x544 <__stack+0xe5>
		}
		break;
	case 'C':
		if(BIT_IS_SET(PINC,pinNumber))
 4d6:	e3 e3       	ldi	r30, 0x33	; 51
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	28 2f       	mov	r18, r24
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	88 2f       	mov	r24, r24
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	a9 01       	movw	r20, r18
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <__stack+0x8f>
 4ea:	55 95       	asr	r21
 4ec:	47 95       	ror	r20
 4ee:	8a 95       	dec	r24
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <__stack+0x8b>
 4f2:	ca 01       	movw	r24, r20
 4f4:	81 70       	andi	r24, 0x01	; 1
 4f6:	90 70       	andi	r25, 0x00	; 0
 4f8:	88 23       	and	r24, r24
 4fa:	29 f0       	breq	.+10     	; 0x506 <__stack+0xa7>
		{
			*value = HIGH;
 4fc:	eb 81       	ldd	r30, Y+3	; 0x03
 4fe:	fc 81       	ldd	r31, Y+4	; 0x04
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	80 83       	st	Z, r24
 504:	1f c0       	rjmp	.+62     	; 0x544 <__stack+0xe5>
		}
		else
		{
			*value = LOW;
 506:	eb 81       	ldd	r30, Y+3	; 0x03
 508:	fc 81       	ldd	r31, Y+4	; 0x04
 50a:	10 82       	st	Z, r1
 50c:	1b c0       	rjmp	.+54     	; 0x544 <__stack+0xe5>
		}
		break;
	case 'D':
		if(BIT_IS_SET(PIND,pinNumber))
 50e:	e0 e3       	ldi	r30, 0x30	; 48
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	28 2f       	mov	r18, r24
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	89 81       	ldd	r24, Y+1	; 0x01
 51a:	88 2f       	mov	r24, r24
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	a9 01       	movw	r20, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <__stack+0xc7>
 522:	55 95       	asr	r21
 524:	47 95       	ror	r20
 526:	8a 95       	dec	r24
 528:	e2 f7       	brpl	.-8      	; 0x522 <__stack+0xc3>
 52a:	ca 01       	movw	r24, r20
 52c:	81 70       	andi	r24, 0x01	; 1
 52e:	90 70       	andi	r25, 0x00	; 0
 530:	88 23       	and	r24, r24
 532:	29 f0       	breq	.+10     	; 0x53e <__stack+0xdf>
		{
			*value = HIGH;
 534:	eb 81       	ldd	r30, Y+3	; 0x03
 536:	fc 81       	ldd	r31, Y+4	; 0x04
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	80 83       	st	Z, r24
 53c:	03 c0       	rjmp	.+6      	; 0x544 <__stack+0xe5>
		}
		else
		{
			*value = LOW;
 53e:	eb 81       	ldd	r30, Y+3	; 0x03
 540:	fc 81       	ldd	r31, Y+4	; 0x04
 542:	10 82       	st	Z, r1
		}
		break;
	}

}
 544:	26 96       	adiw	r28, 0x06	; 6
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	f8 94       	cli
 54a:	de bf       	out	0x3e, r29	; 62
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	cd bf       	out	0x3d, r28	; 61
 550:	cf 91       	pop	r28
 552:	df 91       	pop	r29
 554:	08 95       	ret

00000556 <SWUART_init>:

/*
 * baud rate: is an input argument that describes baudrate that the UART needs to make the communications.
 */
 void SWUART_init(uint32_t baudrate)
 {
 556:	df 93       	push	r29
 558:	cf 93       	push	r28
 55a:	00 d0       	rcall	.+0      	; 0x55c <SWUART_init+0x6>
 55c:	00 d0       	rcall	.+0      	; 0x55e <SWUART_init+0x8>
 55e:	cd b7       	in	r28, 0x3d	; 61
 560:	de b7       	in	r29, 0x3e	; 62
 562:	69 83       	std	Y+1, r22	; 0x01
 564:	7a 83       	std	Y+2, r23	; 0x02
 566:	8b 83       	std	Y+3, r24	; 0x03
 568:	9c 83       	std	Y+4, r25	; 0x04

	 /* Set baud rate */
	 UBRRH = (unsigned char)(baudrate>>8);
 56a:	e0 e4       	ldi	r30, 0x40	; 64
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	89 81       	ldd	r24, Y+1	; 0x01
 570:	9a 81       	ldd	r25, Y+2	; 0x02
 572:	ab 81       	ldd	r26, Y+3	; 0x03
 574:	bc 81       	ldd	r27, Y+4	; 0x04
 576:	89 2f       	mov	r24, r25
 578:	9a 2f       	mov	r25, r26
 57a:	ab 2f       	mov	r26, r27
 57c:	bb 27       	eor	r27, r27
 57e:	80 83       	st	Z, r24
	 UBRRL = (unsigned char)baudrate;
 580:	e9 e2       	ldi	r30, 0x29	; 41
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	89 81       	ldd	r24, Y+1	; 0x01
 586:	80 83       	st	Z, r24
	 /* Enable receiver and transmitter */
	 UCSRB = (1<<RXEN)|(1<<TXEN);
 588:	ea e2       	ldi	r30, 0x2A	; 42
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	88 e1       	ldi	r24, 0x18	; 24
 58e:	80 83       	st	Z, r24
	 /*Asynchronous operation - Set frame format: 8data, 2stop bit , even parity */
	 UCSRC = (1<<URSEL)| (1<<UPM1) |(1<<USBS)|(3<<UCSZ0);
 590:	e0 e4       	ldi	r30, 0x40	; 64
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	8e ea       	ldi	r24, 0xAE	; 174
 596:	80 83       	st	Z, r24

 }
 598:	0f 90       	pop	r0
 59a:	0f 90       	pop	r0
 59c:	0f 90       	pop	r0
 59e:	0f 90       	pop	r0
 5a0:	cf 91       	pop	r28
 5a2:	df 91       	pop	r29
 5a4:	08 95       	ret

000005a6 <SWUART_send>:


void SWUART_send(uint8_t data)
{
 5a6:	df 93       	push	r29
 5a8:	cf 93       	push	r28
 5aa:	0f 92       	push	r0
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62
 5b0:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
 5b2:	eb e2       	ldi	r30, 0x2B	; 43
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	88 2f       	mov	r24, r24
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	80 72       	andi	r24, 0x20	; 32
 5be:	90 70       	andi	r25, 0x00	; 0
 5c0:	00 97       	sbiw	r24, 0x00	; 0
 5c2:	b9 f3       	breq	.-18     	; 0x5b2 <SWUART_send+0xc>

	/* Put data into buffer, sends the data */
	UDR = data;
 5c4:	ec e2       	ldi	r30, 0x2C	; 44
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	89 81       	ldd	r24, Y+1	; 0x01
 5ca:	80 83       	st	Z, r24
}
 5cc:	0f 90       	pop	r0
 5ce:	cf 91       	pop	r28
 5d0:	df 91       	pop	r29
 5d2:	08 95       	ret

000005d4 <SWUART_recieve>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
void SWUART_recieve(uint8_t *data)
{
 5d4:	df 93       	push	r29
 5d6:	cf 93       	push	r28
 5d8:	00 d0       	rcall	.+0      	; 0x5da <SWUART_recieve+0x6>
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62
 5de:	9a 83       	std	Y+2, r25	; 0x02
 5e0:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
 5e2:	eb e2       	ldi	r30, 0x2B	; 43
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
 5e8:	88 23       	and	r24, r24
 5ea:	dc f7       	brge	.-10     	; 0x5e2 <SWUART_recieve+0xe>
	/* Get and return received data from buffer */
	*data = UDR;
 5ec:	ec e2       	ldi	r30, 0x2C	; 44
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	80 81       	ld	r24, Z
 5f2:	e9 81       	ldd	r30, Y+1	; 0x01
 5f4:	fa 81       	ldd	r31, Y+2	; 0x02
 5f6:	80 83       	st	Z, r24
}
 5f8:	0f 90       	pop	r0
 5fa:	0f 90       	pop	r0
 5fc:	cf 91       	pop	r28
 5fe:	df 91       	pop	r29
 600:	08 95       	ret

00000602 <_exit>:
 602:	f8 94       	cli

00000604 <__stop_program>:
 604:	ff cf       	rjmp	.-2      	; 0x604 <__stop_program>
